// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: internal/merchant/merchant.proto

package models

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// represents the type of merchant account
type MerchantAccountType int32

const (
	MerchantAccountType_Individual       MerchantAccountType = 0
	MerchantAccountType_Company          MerchantAccountType = 1
	MerchantAccountType_NonProfit        MerchantAccountType = 2
	MerchantAccountType_GovernmentEntity MerchantAccountType = 3
)

// Enum value maps for MerchantAccountType.
var (
	MerchantAccountType_name = map[int32]string{
		0: "Individual",
		1: "Company",
		2: "NonProfit",
		3: "GovernmentEntity",
	}
	MerchantAccountType_value = map[string]int32{
		"Individual":       0,
		"Company":          1,
		"NonProfit":        2,
		"GovernmentEntity": 3,
	}
)

func (x MerchantAccountType) Enum() *MerchantAccountType {
	p := new(MerchantAccountType)
	*p = x
	return p
}

func (x MerchantAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MerchantAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[0].Descriptor()
}

func (MerchantAccountType) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[0]
}

func (x MerchantAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MerchantAccountType.Descriptor instead.
func (MerchantAccountType) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{0}
}

// Represents the state of the merchant account
type MerchantAccountState int32

const (
	MerchantAccountState_ActiveAndOnboarded          MerchantAccountState = 0
	MerchantAccountState_PendingOnboardingCompletion MerchantAccountState = 1
)

// Enum value maps for MerchantAccountState.
var (
	MerchantAccountState_name = map[int32]string{
		0: "ActiveAndOnboarded",
		1: "PendingOnboardingCompletion",
	}
	MerchantAccountState_value = map[string]int32{
		"ActiveAndOnboarded":          0,
		"PendingOnboardingCompletion": 1,
	}
)

func (x MerchantAccountState) Enum() *MerchantAccountState {
	p := new(MerchantAccountState)
	*p = x
	return p
}

func (x MerchantAccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MerchantAccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[1].Descriptor()
}

func (MerchantAccountState) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[1]
}

func (x MerchantAccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MerchantAccountState.Descriptor instead.
func (MerchantAccountState) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{1}
}

// Represents the manner in which merchant accounts will deliver their service offerings to customers
type FulfillmentOptions int32

const (
	FulfillmentOptions_SHIP_ITEMS         FulfillmentOptions = 0
	FulfillmentOptions_ALLOW_PICKUP       FulfillmentOptions = 1
	FulfillmentOptions_ALLOW_DELIVERY     FulfillmentOptions = 2
	FulfillmentOptions_ALLOW_SELF_SERVICE FulfillmentOptions = 3
)

// Enum value maps for FulfillmentOptions.
var (
	FulfillmentOptions_name = map[int32]string{
		0: "SHIP_ITEMS",
		1: "ALLOW_PICKUP",
		2: "ALLOW_DELIVERY",
		3: "ALLOW_SELF_SERVICE",
	}
	FulfillmentOptions_value = map[string]int32{
		"SHIP_ITEMS":         0,
		"ALLOW_PICKUP":       1,
		"ALLOW_DELIVERY":     2,
		"ALLOW_SELF_SERVICE": 3,
	}
)

func (x FulfillmentOptions) Enum() *FulfillmentOptions {
	p := new(FulfillmentOptions)
	*p = x
	return p
}

func (x FulfillmentOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FulfillmentOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[2].Descriptor()
}

func (FulfillmentOptions) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[2]
}

func (x FulfillmentOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FulfillmentOptions.Descriptor instead.
func (FulfillmentOptions) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{2}
}

// represents the stage in the onboarding flow the merchant account is in
type OnboardingStatus int32

const (
	OnboardingStatus_OnboardingNotStarted         OnboardingStatus = 0
	OnboardingStatus_FeelGuudOnboardingStarted    OnboardingStatus = 1
	OnboardingStatus_FeelGuudOnboardingCompleted  OnboardingStatus = 2
	OnboardingStatus_StripeOnboardingStarted      OnboardingStatus = 3
	OnboardingStatus_StripeOnboardingCompleted    OnboardingStatus = 4
	OnboardingStatus_CatalogueOnboardingStarted   OnboardingStatus = 5
	OnboardingStatus_CatalogueOnboardingCompleted OnboardingStatus = 6
	OnboardingStatus_BCorpOnboardingStarted       OnboardingStatus = 7
	OnboardingStatus_BCorpOnboardingCompleted     OnboardingStatus = 8
)

// Enum value maps for OnboardingStatus.
var (
	OnboardingStatus_name = map[int32]string{
		0: "OnboardingNotStarted",
		1: "FeelGuudOnboardingStarted",
		2: "FeelGuudOnboardingCompleted",
		3: "StripeOnboardingStarted",
		4: "StripeOnboardingCompleted",
		5: "CatalogueOnboardingStarted",
		6: "CatalogueOnboardingCompleted",
		7: "BCorpOnboardingStarted",
		8: "BCorpOnboardingCompleted",
	}
	OnboardingStatus_value = map[string]int32{
		"OnboardingNotStarted":         0,
		"FeelGuudOnboardingStarted":    1,
		"FeelGuudOnboardingCompleted":  2,
		"StripeOnboardingStarted":      3,
		"StripeOnboardingCompleted":    4,
		"CatalogueOnboardingStarted":   5,
		"CatalogueOnboardingCompleted": 6,
		"BCorpOnboardingStarted":       7,
		"BCorpOnboardingCompleted":     8,
	}
)

func (x OnboardingStatus) Enum() *OnboardingStatus {
	p := new(OnboardingStatus)
	*p = x
	return p
}

func (x OnboardingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnboardingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[3].Descriptor()
}

func (OnboardingStatus) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[3]
}

func (x OnboardingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnboardingStatus.Descriptor instead.
func (OnboardingStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{3}
}

// set of causes a merchant may opt to support
type Causes int32

const (
	Causes_VOTING_RIGHTS          Causes = 0
	Causes_CLIMATE_JUSTICE        Causes = 1
	Causes_HEALTHCARE             Causes = 2
	Causes_REFUGEE_CRISIS         Causes = 3
	Causes_RACIAL_JUSTICE         Causes = 4
	Causes_INCOME_GAP             Causes = 5
	Causes_GUN_VIOLENCE           Causes = 6
	Causes_HUNGER_FOOD_INSECURITY Causes = 7
	Causes_EQUALITY               Causes = 8
	Causes_LBGTQ                  Causes = 9
	Causes_EDUCATION              Causes = 10
	Causes_FORCED_CHILD_LABOR     Causes = 11
	Causes_CHILD_ABUSE_NEGLECT    Causes = 12
	Causes_CIVIL_RIGHTS           Causes = 13
	Causes_POVERTY                Causes = 14
)

// Enum value maps for Causes.
var (
	Causes_name = map[int32]string{
		0:  "VOTING_RIGHTS",
		1:  "CLIMATE_JUSTICE",
		2:  "HEALTHCARE",
		3:  "REFUGEE_CRISIS",
		4:  "RACIAL_JUSTICE",
		5:  "INCOME_GAP",
		6:  "GUN_VIOLENCE",
		7:  "HUNGER_FOOD_INSECURITY",
		8:  "EQUALITY",
		9:  "LBGTQ",
		10: "EDUCATION",
		11: "FORCED_CHILD_LABOR",
		12: "CHILD_ABUSE_NEGLECT",
		13: "CIVIL_RIGHTS",
		14: "POVERTY",
	}
	Causes_value = map[string]int32{
		"VOTING_RIGHTS":          0,
		"CLIMATE_JUSTICE":        1,
		"HEALTHCARE":             2,
		"REFUGEE_CRISIS":         3,
		"RACIAL_JUSTICE":         4,
		"INCOME_GAP":             5,
		"GUN_VIOLENCE":           6,
		"HUNGER_FOOD_INSECURITY": 7,
		"EQUALITY":               8,
		"LBGTQ":                  9,
		"EDUCATION":              10,
		"FORCED_CHILD_LABOR":     11,
		"CHILD_ABUSE_NEGLECT":    12,
		"CIVIL_RIGHTS":           13,
		"POVERTY":                14,
	}
)

func (x Causes) Enum() *Causes {
	p := new(Causes)
	*p = x
	return p
}

func (x Causes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Causes) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[4].Descriptor()
}

func (Causes) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[4]
}

func (x Causes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Causes.Descriptor instead.
func (Causes) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{4}
}

// Credit card type
type Settings_PaymentDetails_CreditCardBrand int32

const (
	Settings_PaymentDetails_VISA       Settings_PaymentDetails_CreditCardBrand = 0
	Settings_PaymentDetails_MASTERCARD Settings_PaymentDetails_CreditCardBrand = 1
	Settings_PaymentDetails_DISCOVER   Settings_PaymentDetails_CreditCardBrand = 2
)

// Enum value maps for Settings_PaymentDetails_CreditCardBrand.
var (
	Settings_PaymentDetails_CreditCardBrand_name = map[int32]string{
		0: "VISA",
		1: "MASTERCARD",
		2: "DISCOVER",
	}
	Settings_PaymentDetails_CreditCardBrand_value = map[string]int32{
		"VISA":       0,
		"MASTERCARD": 1,
		"DISCOVER":   2,
	}
)

func (x Settings_PaymentDetails_CreditCardBrand) Enum() *Settings_PaymentDetails_CreditCardBrand {
	p := new(Settings_PaymentDetails_CreditCardBrand)
	*p = x
	return p
}

func (x Settings_PaymentDetails_CreditCardBrand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_PaymentDetails_CreditCardBrand) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[5].Descriptor()
}

func (Settings_PaymentDetails_CreditCardBrand) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[5]
}

func (x Settings_PaymentDetails_CreditCardBrand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_PaymentDetails_CreditCardBrand.Descriptor instead.
func (Settings_PaymentDetails_CreditCardBrand) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{1, 0, 0}
}

// currency in which this business aims to transact
type Settings_PaymentDetails_CurrencyCode int32

const (
	Settings_PaymentDetails_USD Settings_PaymentDetails_CurrencyCode = 0
	Settings_PaymentDetails_GBP Settings_PaymentDetails_CurrencyCode = 1
)

// Enum value maps for Settings_PaymentDetails_CurrencyCode.
var (
	Settings_PaymentDetails_CurrencyCode_name = map[int32]string{
		0: "USD",
		1: "GBP",
	}
	Settings_PaymentDetails_CurrencyCode_value = map[string]int32{
		"USD": 0,
		"GBP": 1,
	}
)

func (x Settings_PaymentDetails_CurrencyCode) Enum() *Settings_PaymentDetails_CurrencyCode {
	p := new(Settings_PaymentDetails_CurrencyCode)
	*p = x
	return p
}

func (x Settings_PaymentDetails_CurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_PaymentDetails_CurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[6].Descriptor()
}

func (Settings_PaymentDetails_CurrencyCode) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[6]
}

func (x Settings_PaymentDetails_CurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_PaymentDetails_CurrencyCode.Descriptor instead.
func (Settings_PaymentDetails_CurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{1, 0, 1}
}

// Represents the set of supported digital wallets
type Settings_PaymentDetails_DigitalWallets int32

const (
	Settings_PaymentDetails_ANDROID_PAY Settings_PaymentDetails_DigitalWallets = 0
	Settings_PaymentDetails_APPLE_PAY   Settings_PaymentDetails_DigitalWallets = 1
	Settings_PaymentDetails_GOOGLE_PAY  Settings_PaymentDetails_DigitalWallets = 2
	Settings_PaymentDetails_SHOPIFY_PAY Settings_PaymentDetails_DigitalWallets = 3
)

// Enum value maps for Settings_PaymentDetails_DigitalWallets.
var (
	Settings_PaymentDetails_DigitalWallets_name = map[int32]string{
		0: "ANDROID_PAY",
		1: "APPLE_PAY",
		2: "GOOGLE_PAY",
		3: "SHOPIFY_PAY",
	}
	Settings_PaymentDetails_DigitalWallets_value = map[string]int32{
		"ANDROID_PAY": 0,
		"APPLE_PAY":   1,
		"GOOGLE_PAY":  2,
		"SHOPIFY_PAY": 3,
	}
)

func (x Settings_PaymentDetails_DigitalWallets) Enum() *Settings_PaymentDetails_DigitalWallets {
	p := new(Settings_PaymentDetails_DigitalWallets)
	*p = x
	return p
}

func (x Settings_PaymentDetails_DigitalWallets) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_PaymentDetails_DigitalWallets) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[7].Descriptor()
}

func (Settings_PaymentDetails_DigitalWallets) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[7]
}

func (x Settings_PaymentDetails_DigitalWallets) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_PaymentDetails_DigitalWallets.Descriptor instead.
func (Settings_PaymentDetails_DigitalWallets) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{1, 0, 2}
}

// Represents the types of services/items the merchant account will sell to customers
type ItemSold_ItemsType int32

const (
	ItemSold_PHYSICAL_ITEMS ItemSold_ItemsType = 0
	ItemSold_MENU_ITEMS     ItemSold_ItemsType = 1
	ItemSold_DONATIONS      ItemSold_ItemsType = 2
	ItemSold_TICKETS        ItemSold_ItemsType = 3
	ItemSold_MEMBERSHIPS    ItemSold_ItemsType = 4
	ItemSold_SERVICES       ItemSold_ItemsType = 5
)

// Enum value maps for ItemSold_ItemsType.
var (
	ItemSold_ItemsType_name = map[int32]string{
		0: "PHYSICAL_ITEMS",
		1: "MENU_ITEMS",
		2: "DONATIONS",
		3: "TICKETS",
		4: "MEMBERSHIPS",
		5: "SERVICES",
	}
	ItemSold_ItemsType_value = map[string]int32{
		"PHYSICAL_ITEMS": 0,
		"MENU_ITEMS":     1,
		"DONATIONS":      2,
		"TICKETS":        3,
		"MEMBERSHIPS":    4,
		"SERVICES":       5,
	}
)

func (x ItemSold_ItemsType) Enum() *ItemSold_ItemsType {
	p := new(ItemSold_ItemsType)
	*p = x
	return p
}

func (x ItemSold_ItemsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemSold_ItemsType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[8].Descriptor()
}

func (ItemSold_ItemsType) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[8]
}

func (x ItemSold_ItemsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemSold_ItemsType.Descriptor instead.
func (ItemSold_ItemsType) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{2, 0}
}

type Policy_PolicyType int32

const (
	Policy_SHIPPING_POLICY Policy_PolicyType = 0
	Policy_RETURN_POLICY   Policy_PolicyType = 1
)

// Enum value maps for Policy_PolicyType.
var (
	Policy_PolicyType_name = map[int32]string{
		0: "SHIPPING_POLICY",
		1: "RETURN_POLICY",
	}
	Policy_PolicyType_value = map[string]int32{
		"SHIPPING_POLICY": 0,
		"RETURN_POLICY":   1,
	}
)

func (x Policy_PolicyType) Enum() *Policy_PolicyType {
	p := new(Policy_PolicyType)
	*p = x
	return p
}

func (x Policy_PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[9].Descriptor()
}

func (Policy_PolicyType) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[9]
}

func (x Policy_PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_PolicyType.Descriptor instead.
func (Policy_PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{6, 0}
}

type ShippingPolicy_PostalService int32

const (
	ShippingPolicy_USPS      ShippingPolicy_PostalService = 0
	ShippingPolicy_FEDEX     ShippingPolicy_PostalService = 1
	ShippingPolicy_DHL       ShippingPolicy_PostalService = 2
	ShippingPolicy_UPS       ShippingPolicy_PostalService = 3
	ShippingPolicy_BLUE_DART ShippingPolicy_PostalService = 4
)

// Enum value maps for ShippingPolicy_PostalService.
var (
	ShippingPolicy_PostalService_name = map[int32]string{
		0: "USPS",
		1: "FEDEX",
		2: "DHL",
		3: "UPS",
		4: "BLUE_DART",
	}
	ShippingPolicy_PostalService_value = map[string]int32{
		"USPS":      0,
		"FEDEX":     1,
		"DHL":       2,
		"UPS":       3,
		"BLUE_DART": 4,
	}
)

func (x ShippingPolicy_PostalService) Enum() *ShippingPolicy_PostalService {
	p := new(ShippingPolicy_PostalService)
	*p = x
	return p
}

func (x ShippingPolicy_PostalService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShippingPolicy_PostalService) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_merchant_merchant_proto_enumTypes[10].Descriptor()
}

func (ShippingPolicy_PostalService) Type() protoreflect.EnumType {
	return &file_internal_merchant_merchant_proto_enumTypes[10]
}

func (x ShippingPolicy_PostalService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShippingPolicy_PostalService.Descriptor instead.
func (ShippingPolicy_PostalService) EnumDescriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{8, 0}
}

// MerchantAccount represents a business account in the context of feelguuds
type MerchantAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// set of owners who are responsible for this merchant account
	Owners []*Owner `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
	// business name of the merchant account
	BusinessName string `protobuf:"bytes,3,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	// business email of the merchant account
	BusinessEmail string `protobuf:"bytes,4,opt,name=business_email,json=businessEmail,proto3" json:"business_email,omitempty"`
	// employer identification number
	EmployerId uint64 `protobuf:"varint,5,opt,name=employer_id,json=employerId,proto3" json:"employer_id,omitempty"`
	// estimated annual revenue pre-tax of the merchant account
	EstimateAnnualRevenue string `protobuf:"bytes,6,opt,name=estimate_annual_revenue,json=estimateAnnualRevenue,proto3" json:"estimate_annual_revenue,omitempty"`
	// merchant account address
	Address *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// types of item this merchant is selling
	ItemsOrServicesSold []*ItemSold `protobuf:"bytes,8,rep,name=items_or_services_sold,json=itemsOrServicesSold,proto3" json:"items_or_services_sold,omitempty"`
	// ways in which the merchant aims to fulfill purchases
	FulfillmentOptions []FulfillmentOptions `protobuf:"varint,9,rep,packed,name=fulfillment_options,json=fulfillmentOptions,proto3,enum=FulfillmentOptions" json:"fulfillment_options,omitempty"`
	// shop settings
	ShopSettings *Settings `protobuf:"bytes,10,opt,name=ShopSettings,proto3" json:"ShopSettings,omitempty"`
	// set of supported causes the merchant adheres to
	SupportedCauses []Causes `protobuf:"varint,11,rep,packed,name=supported_causes,json=supportedCauses,proto3,enum=Causes" json:"supported_causes,omitempty"`
	// merchant account bio
	Bio string `protobuf:"bytes,12,opt,name=bio,proto3" json:"bio,omitempty"`
	// merchant account headline
	Headline string `protobuf:"bytes,13,opt,name=headline,proto3" json:"headline,omitempty"`
	// merchant account phone number
	PhoneNumber string `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// set of tags associated with a merchant
	Tags []*Tags `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	// stripe connect account id
	StripeConnectedAccountId string `protobuf:"bytes,16,opt,name=stripe_connected_account_id,json=stripeConnectedAccountId,proto3" json:"stripe_connected_account_id,omitempty"`
	// id of the associated stripe account this merchant account is tied to
	StripeAccountId uint64 `protobuf:"varint,17,opt,name=stripe_account_id,json=stripeAccountId,proto3" json:"stripe_account_id,omitempty"`
	// id of the merchant account from the context of the auth service
	AuthnAccountId uint64 `protobuf:"varint,18,opt,name=authn_account_id,json=authnAccountId,proto3" json:"authn_account_id,omitempty"`
	// merchant account onboarding step
	AccountOnboardingDetails OnboardingStatus `protobuf:"varint,19,opt,name=account_onboarding_details,json=accountOnboardingDetails,proto3,enum=OnboardingStatus" json:"account_onboarding_details,omitempty"`
	// merchant account state
	AccountOnboardingState MerchantAccountState `protobuf:"varint,20,opt,name=account_onboarding_state,json=accountOnboardingState,proto3,enum=MerchantAccountState" json:"account_onboarding_state,omitempty"`
	// type of merchant account
	AccountType     MerchantAccountType `protobuf:"varint,21,opt,name=account_type,json=accountType,proto3,enum=MerchantAccountType" json:"account_type,omitempty"`
	IsActive        bool                `protobuf:"varint,22,opt,name=isActive,proto3" json:"isActive,omitempty"`
	BusinessType    string              `protobuf:"bytes,23,opt,name=businessType,proto3" json:"businessType,omitempty"`
	Country         string              `protobuf:"bytes,24,opt,name=country,proto3" json:"country,omitempty"`
	DefaultCurrency string              `protobuf:"bytes,25,opt,name=defaultCurrency,proto3" json:"defaultCurrency,omitempty"`
}

func (x *MerchantAccount) Reset() {
	*x = MerchantAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantAccount) ProtoMessage() {}

func (x *MerchantAccount) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantAccount.ProtoReflect.Descriptor instead.
func (*MerchantAccount) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{0}
}

func (x *MerchantAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MerchantAccount) GetOwners() []*Owner {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *MerchantAccount) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *MerchantAccount) GetBusinessEmail() string {
	if x != nil {
		return x.BusinessEmail
	}
	return ""
}

func (x *MerchantAccount) GetEmployerId() uint64 {
	if x != nil {
		return x.EmployerId
	}
	return 0
}

func (x *MerchantAccount) GetEstimateAnnualRevenue() string {
	if x != nil {
		return x.EstimateAnnualRevenue
	}
	return ""
}

func (x *MerchantAccount) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MerchantAccount) GetItemsOrServicesSold() []*ItemSold {
	if x != nil {
		return x.ItemsOrServicesSold
	}
	return nil
}

func (x *MerchantAccount) GetFulfillmentOptions() []FulfillmentOptions {
	if x != nil {
		return x.FulfillmentOptions
	}
	return nil
}

func (x *MerchantAccount) GetShopSettings() *Settings {
	if x != nil {
		return x.ShopSettings
	}
	return nil
}

func (x *MerchantAccount) GetSupportedCauses() []Causes {
	if x != nil {
		return x.SupportedCauses
	}
	return nil
}

func (x *MerchantAccount) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *MerchantAccount) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *MerchantAccount) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *MerchantAccount) GetTags() []*Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MerchantAccount) GetStripeConnectedAccountId() string {
	if x != nil {
		return x.StripeConnectedAccountId
	}
	return ""
}

func (x *MerchantAccount) GetStripeAccountId() uint64 {
	if x != nil {
		return x.StripeAccountId
	}
	return 0
}

func (x *MerchantAccount) GetAuthnAccountId() uint64 {
	if x != nil {
		return x.AuthnAccountId
	}
	return 0
}

func (x *MerchantAccount) GetAccountOnboardingDetails() OnboardingStatus {
	if x != nil {
		return x.AccountOnboardingDetails
	}
	return OnboardingStatus_OnboardingNotStarted
}

func (x *MerchantAccount) GetAccountOnboardingState() MerchantAccountState {
	if x != nil {
		return x.AccountOnboardingState
	}
	return MerchantAccountState_ActiveAndOnboarded
}

func (x *MerchantAccount) GetAccountType() MerchantAccountType {
	if x != nil {
		return x.AccountType
	}
	return MerchantAccountType_Individual
}

func (x *MerchantAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *MerchantAccount) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *MerchantAccount) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MerchantAccount) GetDefaultCurrency() string {
	if x != nil {
		return x.DefaultCurrency
	}
	return ""
}

// Represents all configurable settings for a given merchant account
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// merchant account payment details
	PaymentDetails *Settings_PaymentDetails `protobuf:"bytes,2,opt,name=payment_details,json=paymentDetails,proto3" json:"payment_details,omitempty"`
	// set of policies a merchant account can define on it's shop profile
	ShopPolicy []*Policy `protobuf:"bytes,3,rep,name=ShopPolicy,proto3" json:"ShopPolicy,omitempty"`
	// set of policies a merchant account can define with respect to privacy on it's shop profile
	PrivacyPolicy []*Policy `protobuf:"bytes,4,rep,name=PrivacyPolicy,proto3" json:"PrivacyPolicy,omitempty"`
	// set of return policies a merchant account can define with respect to issuing refunds on its shop profile
	ReturnPolicy *ReturnPolicy `protobuf:"bytes,5,opt,name=ReturnPolicy,proto3" json:"ReturnPolicy,omitempty"`
	// set of shipping policies a merchant account can define on to its shop profile
	ShippingPolicy *ShippingPolicy `protobuf:"bytes,6,opt,name=ShippingPolicy,proto3" json:"ShippingPolicy,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{1}
}

func (x *Settings) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Settings) GetPaymentDetails() *Settings_PaymentDetails {
	if x != nil {
		return x.PaymentDetails
	}
	return nil
}

func (x *Settings) GetShopPolicy() []*Policy {
	if x != nil {
		return x.ShopPolicy
	}
	return nil
}

func (x *Settings) GetPrivacyPolicy() []*Policy {
	if x != nil {
		return x.PrivacyPolicy
	}
	return nil
}

func (x *Settings) GetReturnPolicy() *ReturnPolicy {
	if x != nil {
		return x.ReturnPolicy
	}
	return nil
}

func (x *Settings) GetShippingPolicy() *ShippingPolicy {
	if x != nil {
		return x.ShippingPolicy
	}
	return nil
}

// Represents the types of items a merchant account sells
type ItemSold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type ItemSold_ItemsType `protobuf:"varint,2,opt,name=type,proto3,enum=ItemSold_ItemsType" json:"type,omitempty"`
}

func (x *ItemSold) Reset() {
	*x = ItemSold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemSold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemSold) ProtoMessage() {}

func (x *ItemSold) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemSold.ProtoReflect.Descriptor instead.
func (*ItemSold) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{2}
}

func (x *ItemSold) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemSold) GetType() ItemSold_ItemsType {
	if x != nil {
		return x.Type
	}
	return ItemSold_PHYSICAL_ITEMS
}

// business address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the address field
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	// the unit if the address is an apartment
	Unit string `protobuf:"bytes,3,opt,name=Unit,proto3" json:"Unit,omitempty"`
	// the address zipcode
	ZipCode string `protobuf:"bytes,4,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	// the city
	City string `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`
	// the state/municipality
	State string `protobuf:"bytes,6,opt,name=State,proto3" json:"State,omitempty"`
	// longitude
	Longitude string `protobuf:"bytes,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// latittude
	Lattitude string `protobuf:"bytes,8,opt,name=lattitude,proto3" json:"lattitude,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{3}
}

func (x *Address) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Address) GetLattitude() string {
	if x != nil {
		return x.Lattitude
	}
	return ""
}

// Represents the merchant account owner
type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Email     string `protobuf:"bytes,4,opt,name=Email,proto3" json:"Email,omitempty"`
	Country   string `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{4}
}

func (x *Owner) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Owner) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Owner) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Owner) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Owner) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// represents a sample tag
type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TagName        string   `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	TagDescription string   `protobuf:"bytes,3,opt,name=tag_description,json=tagDescription,proto3" json:"tag_description,omitempty"`
	Metadata       []string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{5}
}

func (x *Tags) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tags) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *Tags) GetTagDescription() string {
	if x != nil {
		return x.TagDescription
	}
	return ""
}

func (x *Tags) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Represents various policies a merchant account can declare for various use cases
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Body   string  `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	Handle string  `protobuf:"bytes,3,opt,name=Handle,proto3" json:"Handle,omitempty"`
	Title  string  `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Tags   []*Tags `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{6}
}

func (x *Policy) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Policy) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Policy) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *Policy) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Policy) GetTags() []*Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

// ReturnPolicy represent a sample shop return policy
type ReturnPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                      uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyMeta                              *Policy  `protobuf:"bytes,2,opt,name=policy_meta,json=policyMeta,proto3" json:"policy_meta,omitempty"`
	ContactWithinDaysOfDelivery             uint32   `protobuf:"varint,3,opt,name=contact_within_days_of_delivery,json=contactWithinDaysOfDelivery,proto3" json:"contact_within_days_of_delivery,omitempty"`
	ShipWithDaysOfDelivery                  uint32   `protobuf:"varint,4,opt,name=ship_with_days_of_delivery,json=shipWithDaysOfDelivery,proto3" json:"ship_with_days_of_delivery,omitempty"`
	RequestCancellationWithinDaysOfDelivery uint32   `protobuf:"varint,5,opt,name=request_cancellation_within_days_of_delivery,json=requestCancellationWithinDaysOfDelivery,proto3" json:"request_cancellation_within_days_of_delivery,omitempty"`
	ItemsNotToBeReturned                    []string `protobuf:"bytes,6,rep,name=items_not_to_be_returned,json=itemsNotToBeReturned,proto3" json:"items_not_to_be_returned,omitempty"`
	ConditionsOfReturn                      []string `protobuf:"bytes,7,rep,name=conditions_of_return,json=conditionsOfReturn,proto3" json:"conditions_of_return,omitempty"`
	Details                                 string   `protobuf:"bytes,8,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ReturnPolicy) Reset() {
	*x = ReturnPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnPolicy) ProtoMessage() {}

func (x *ReturnPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnPolicy.ProtoReflect.Descriptor instead.
func (*ReturnPolicy) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{7}
}

func (x *ReturnPolicy) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReturnPolicy) GetPolicyMeta() *Policy {
	if x != nil {
		return x.PolicyMeta
	}
	return nil
}

func (x *ReturnPolicy) GetContactWithinDaysOfDelivery() uint32 {
	if x != nil {
		return x.ContactWithinDaysOfDelivery
	}
	return 0
}

func (x *ReturnPolicy) GetShipWithDaysOfDelivery() uint32 {
	if x != nil {
		return x.ShipWithDaysOfDelivery
	}
	return 0
}

func (x *ReturnPolicy) GetRequestCancellationWithinDaysOfDelivery() uint32 {
	if x != nil {
		return x.RequestCancellationWithinDaysOfDelivery
	}
	return 0
}

func (x *ReturnPolicy) GetItemsNotToBeReturned() []string {
	if x != nil {
		return x.ItemsNotToBeReturned
	}
	return nil
}

func (x *ReturnPolicy) GetConditionsOfReturn() []string {
	if x != nil {
		return x.ConditionsOfReturn
	}
	return nil
}

func (x *ReturnPolicy) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// ShippingPolicy represents a sample shop shipping policy
type ShippingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyMeta       *Policy                      `protobuf:"bytes,2,opt,name=policy_meta,json=policyMeta,proto3" json:"policy_meta,omitempty"`
	PostalService    ShippingPolicy_PostalService `protobuf:"varint,3,opt,name=postal_service,json=postalService,proto3,enum=ShippingPolicy_PostalService" json:"postal_service,omitempty"`
	DaysOrderShipsIn uint32                       `protobuf:"varint,4,opt,name=days_order_ships_in,json=daysOrderShipsIn,proto3" json:"days_order_ships_in,omitempty"`
	Details          string                       `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ShippingPolicy) Reset() {
	*x = ShippingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingPolicy) ProtoMessage() {}

func (x *ShippingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingPolicy.ProtoReflect.Descriptor instead.
func (*ShippingPolicy) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{8}
}

func (x *ShippingPolicy) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShippingPolicy) GetPolicyMeta() *Policy {
	if x != nil {
		return x.PolicyMeta
	}
	return nil
}

func (x *ShippingPolicy) GetPostalService() ShippingPolicy_PostalService {
	if x != nil {
		return x.PostalService
	}
	return ShippingPolicy_USPS
}

func (x *ShippingPolicy) GetDaysOrderShipsIn() uint32 {
	if x != nil {
		return x.DaysOrderShipsIn
	}
	return 0
}

func (x *ShippingPolicy) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Represents the various details associated with a payment type
type Settings_PaymentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// set of acceptable credit card types
	AcceptableCreditCardTypes []Settings_PaymentDetails_CreditCardBrand `protobuf:"varint,2,rep,packed,name=acceptable_credit_card_types,json=acceptableCreditCardTypes,proto3,enum=Settings_PaymentDetails_CreditCardBrand" json:"acceptable_credit_card_types,omitempty"`
	// primary currency this business aims to transact in
	PrimaryCurrencyCode Settings_PaymentDetails_CurrencyCode `protobuf:"varint,3,opt,name=primary_currency_code,json=primaryCurrencyCode,proto3,enum=Settings_PaymentDetails_CurrencyCode" json:"primary_currency_code,omitempty"`
	// set of currencies the merchant can support
	EnabledCurrencyCodes []Settings_PaymentDetails_CurrencyCode `protobuf:"varint,4,rep,packed,name=enabled_currency_codes,json=enabledCurrencyCodes,proto3,enum=Settings_PaymentDetails_CurrencyCode" json:"enabled_currency_codes,omitempty"`
	// set of supported digital wallets
	SupportedDigitalWallets []Settings_PaymentDetails_DigitalWallets `protobuf:"varint,5,rep,packed,name=supported_digital_wallets,json=supportedDigitalWallets,proto3,enum=Settings_PaymentDetails_DigitalWallets" json:"supported_digital_wallets,omitempty"`
}

func (x *Settings_PaymentDetails) Reset() {
	*x = Settings_PaymentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_merchant_merchant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings_PaymentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_PaymentDetails) ProtoMessage() {}

func (x *Settings_PaymentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_internal_merchant_merchant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_PaymentDetails.ProtoReflect.Descriptor instead.
func (*Settings_PaymentDetails) Descriptor() ([]byte, []int) {
	return file_internal_merchant_merchant_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Settings_PaymentDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Settings_PaymentDetails) GetAcceptableCreditCardTypes() []Settings_PaymentDetails_CreditCardBrand {
	if x != nil {
		return x.AcceptableCreditCardTypes
	}
	return nil
}

func (x *Settings_PaymentDetails) GetPrimaryCurrencyCode() Settings_PaymentDetails_CurrencyCode {
	if x != nil {
		return x.PrimaryCurrencyCode
	}
	return Settings_PaymentDetails_USD
}

func (x *Settings_PaymentDetails) GetEnabledCurrencyCodes() []Settings_PaymentDetails_CurrencyCode {
	if x != nil {
		return x.EnabledCurrencyCodes
	}
	return nil
}

func (x *Settings_PaymentDetails) GetSupportedDigitalWallets() []Settings_PaymentDetails_DigitalWallets {
	if x != nil {
		return x.SupportedDigitalWallets
	}
	return nil
}

var File_internal_merchant_merchant_proto protoreflect.FileDescriptor

var file_internal_merchant_merchant_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97,
	0x09, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x2a, 0x02, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x48, 0x0a, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x64, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x2a, 0x02, 0x48, 0x01, 0x52, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x4f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x13, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x37, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x4f, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbe, 0x07, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02,
	0x38, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b,
	0x0a, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x0c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x0e,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0xe0,
	0x04, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x69, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x19, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x15,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x56, 0x49, 0x53, 0x41, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x10, 0x02, 0x22, 0x20, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x42, 0x50, 0x10, 0x01, 0x22, 0x51, 0x0a, 0x0e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x50, 0x50,
	0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x4f, 0x4f, 0x47,
	0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x50,
	0x49, 0x46, 0x59, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x03, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x6c, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x6a, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x53, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x05, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0x7e, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xb5, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x22, 0xad, 0x03, 0x0a, 0x0c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x73, 0x68, 0x69, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x27, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x4e, 0x6f,
	0x74, 0x54, 0x6f, 0x42, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0b,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x68,
	0x69, 0x70, 0x73, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x45, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x50, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x45,
	0x44, 0x45, 0x58, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x48, 0x4c, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x50, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x55, 0x45, 0x5f,
	0x44, 0x41, 0x52, 0x54, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x03, 0x2a,
	0x4f, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01,
	0x2a, 0x62, 0x0a, 0x12, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x03, 0x2a, 0xa4, 0x02, 0x0a, 0x10, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x65, 0x65, 0x6c, 0x47, 0x75, 0x75, 0x64, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x65, 0x65, 0x6c, 0x47, 0x75, 0x75, 0x64, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10,
	0x06, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x43, 0x6f, 0x72, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x43, 0x6f, 0x72, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x08, 0x2a, 0x9e, 0x02, 0x0a, 0x06,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49,
	0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4a, 0x55, 0x53, 0x54, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x46, 0x55, 0x47, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x53, 0x49, 0x53,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4a, 0x55, 0x53,
	0x54, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45,
	0x5f, 0x47, 0x41, 0x50, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x55, 0x4e, 0x5f, 0x56, 0x49,
	0x4f, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x55, 0x4e, 0x47,
	0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x42, 0x47, 0x54, 0x51, 0x10, 0x09, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x41, 0x42,
	0x4f, 0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x42,
	0x55, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x0c, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x49, 0x56, 0x49, 0x4c, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x0d, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x59, 0x10, 0x0e, 0x42, 0x09, 0x5a, 0x07,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_merchant_merchant_proto_rawDescOnce sync.Once
	file_internal_merchant_merchant_proto_rawDescData = file_internal_merchant_merchant_proto_rawDesc
)

func file_internal_merchant_merchant_proto_rawDescGZIP() []byte {
	file_internal_merchant_merchant_proto_rawDescOnce.Do(func() {
		file_internal_merchant_merchant_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_merchant_merchant_proto_rawDescData)
	})
	return file_internal_merchant_merchant_proto_rawDescData
}

var file_internal_merchant_merchant_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_internal_merchant_merchant_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_internal_merchant_merchant_proto_goTypes = []interface{}{
	(MerchantAccountType)(0),                     // 0: MerchantAccountType
	(MerchantAccountState)(0),                    // 1: MerchantAccountState
	(FulfillmentOptions)(0),                      // 2: FulfillmentOptions
	(OnboardingStatus)(0),                        // 3: OnboardingStatus
	(Causes)(0),                                  // 4: Causes
	(Settings_PaymentDetails_CreditCardBrand)(0), // 5: Settings.PaymentDetails.CreditCardBrand
	(Settings_PaymentDetails_CurrencyCode)(0),    // 6: Settings.PaymentDetails.CurrencyCode
	(Settings_PaymentDetails_DigitalWallets)(0),  // 7: Settings.PaymentDetails.DigitalWallets
	(ItemSold_ItemsType)(0),                      // 8: ItemSold.ItemsType
	(Policy_PolicyType)(0),                       // 9: Policy.PolicyType
	(ShippingPolicy_PostalService)(0),            // 10: ShippingPolicy.PostalService
	(*MerchantAccount)(nil),                      // 11: MerchantAccount
	(*Settings)(nil),                             // 12: Settings
	(*ItemSold)(nil),                             // 13: ItemSold
	(*Address)(nil),                              // 14: Address
	(*Owner)(nil),                                // 15: Owner
	(*Tags)(nil),                                 // 16: Tags
	(*Policy)(nil),                               // 17: Policy
	(*ReturnPolicy)(nil),                         // 18: ReturnPolicy
	(*ShippingPolicy)(nil),                       // 19: ShippingPolicy
	(*Settings_PaymentDetails)(nil),              // 20: Settings.PaymentDetails
}
var file_internal_merchant_merchant_proto_depIdxs = []int32{
	15, // 0: MerchantAccount.owners:type_name -> Owner
	14, // 1: MerchantAccount.address:type_name -> Address
	13, // 2: MerchantAccount.items_or_services_sold:type_name -> ItemSold
	2,  // 3: MerchantAccount.fulfillment_options:type_name -> FulfillmentOptions
	12, // 4: MerchantAccount.ShopSettings:type_name -> Settings
	4,  // 5: MerchantAccount.supported_causes:type_name -> Causes
	16, // 6: MerchantAccount.tags:type_name -> Tags
	3,  // 7: MerchantAccount.account_onboarding_details:type_name -> OnboardingStatus
	1,  // 8: MerchantAccount.account_onboarding_state:type_name -> MerchantAccountState
	0,  // 9: MerchantAccount.account_type:type_name -> MerchantAccountType
	20, // 10: Settings.payment_details:type_name -> Settings.PaymentDetails
	17, // 11: Settings.ShopPolicy:type_name -> Policy
	17, // 12: Settings.PrivacyPolicy:type_name -> Policy
	18, // 13: Settings.ReturnPolicy:type_name -> ReturnPolicy
	19, // 14: Settings.ShippingPolicy:type_name -> ShippingPolicy
	8,  // 15: ItemSold.type:type_name -> ItemSold.ItemsType
	16, // 16: Policy.tags:type_name -> Tags
	17, // 17: ReturnPolicy.policy_meta:type_name -> Policy
	17, // 18: ShippingPolicy.policy_meta:type_name -> Policy
	10, // 19: ShippingPolicy.postal_service:type_name -> ShippingPolicy.PostalService
	5,  // 20: Settings.PaymentDetails.acceptable_credit_card_types:type_name -> Settings.PaymentDetails.CreditCardBrand
	6,  // 21: Settings.PaymentDetails.primary_currency_code:type_name -> Settings.PaymentDetails.CurrencyCode
	6,  // 22: Settings.PaymentDetails.enabled_currency_codes:type_name -> Settings.PaymentDetails.CurrencyCode
	7,  // 23: Settings.PaymentDetails.supported_digital_wallets:type_name -> Settings.PaymentDetails.DigitalWallets
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_internal_merchant_merchant_proto_init() }
func file_internal_merchant_merchant_proto_init() {
	if File_internal_merchant_merchant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_merchant_merchant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemSold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_merchant_merchant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings_PaymentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_merchant_merchant_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_merchant_merchant_proto_goTypes,
		DependencyIndexes: file_internal_merchant_merchant_proto_depIdxs,
		EnumInfos:         file_internal_merchant_merchant_proto_enumTypes,
		MessageInfos:      file_internal_merchant_merchant_proto_msgTypes,
	}.Build()
	File_internal_merchant_merchant_proto = out.File
	file_internal_merchant_merchant_proto_rawDesc = nil
	file_internal_merchant_merchant_proto_goTypes = nil
	file_internal_merchant_merchant_proto_depIdxs = nil
}
