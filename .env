# Authentication Handler Service & Dependencies Configurations
# ========================================================= #
# ========================================================= #
# ========================================================= #
# ========================================================= #
# ========================================================= #
# ========================================================= #
HTTP_PORT=9891
HTTPS_PORT=9898
METRICS_PORT=9899
GRPC_PORT=9896
GRPC_SERVICE_NAME=FEELGUUDS_PLATFORM
GRPC_RPC_DEADLINE_IN_MS=5ms
GRPC_RPC_RETRIES=3
GRPC_RPC_RETRY_TIMEOUT_IN_MS=100ms
GRPC_RPC_RETRY_BACKOFF_IN_MS=20ms
GRPC_ENABLE_TLS=true
GRPC_CERT_PATH=./cert
LOG_LEVEL=info
BACKEND_SERVICE_URLS=
HTTP_CLIENT_TIMEOUT_IN_MINUTES=2m
HTTP_SERVER_TIMEOUT_IN_SECONDS=30s
HTTP_SERVER_SHUTDOWN_TIMEOUT_IN_SECONDS=5s
DATA_PATH=/data
CONFIG_PATH=/config
CERT_PATH=/certificate/cert/
CONFIG_FILE=config.yaml
UI_PATH=./ui
UI_LOGO=
UI_COLOR=#34577c
UI_MESSAGE=FEELGUUDS_PLATFORM
ENABLE_H2C=false
ENABLE_RANDOM_DELAY=false
ENABLE_RANDOM_ERROR=false
RANDOM_DELAY_UNIT=ms
RANDOM_DELAY_MIN=25
RANDOM_DELAY_MAX=75
SET_SERVICE_UNHEALTHY=false
SET_SERVICE_UNREADY=false
ENABLE_CPU_STRESS_TEST=false
ENABLE_MEMORY_STRESS_TEST=false
NUMBER_OF_STRESSED_CPU=0
DATA_LOADED_IN_MEMORY_FOR_STRESS_TEST_IN_MB=0
CACHE_SERVER_ADDRESS=
AUTHN_ISSUER_BASE_URL=http://localhost
AUTHN_ORIGIN=http://localhost
PRIVATE_BASE_URL=http://authentication-service # update this for kubernetes
AUTHN_PUBLIC_BASE_URL=http://localhost
ENABLE_AUTHN_PRIVATE_INTEGRATION=true
HTTP_MAX_RETRIES=3
HTTP_MIN_RETRY_WAIT_TIME_IN_MS=100ms
HTTP_MAX_RETRY_WAIT_TIME_IN_MS=200ms
HTTP_REQUEST_TIMEOUT_IN_MS=500ms
SERVICE_NAME=PLATFORM
METRIC_CONNECTION_ADDRESS=http://jaeger-collector:14268/api/traces
ENABLE_VERSION_FROM_FILE=true
DOWNSTREAM_SERVICE_CONNECTION_LIMIT=8

# Authentication Service & Dependencies Configurations
# ========================================================= #
# ========================================================= #
# ========================================================= #
# ========================================================= #
# ========================================================= #
# ========================================================= #
AUTHN_SERVICE_NAME=authentication-service
AUTHN_EXTERNAL_PORT=8000
AUTHN_INTERNAL_PORT=3000
# This specifies the base URL of the AuthN service. It will be embedded in all issued JWTs as the iss. Clients will depend on this information
 # to find and fetch the service's public key when verifying JWTs.
AUTHN_PRIVATE_BASE_URL=http://localhost
# comma-delimited list of domains (host and optionally port, no path)
# Any domain listed in this variable will be trusted for three things:
# 1. Requests sent from these domains (as determined by the Origin header) will satisfy CSRF requirements.
# 2. Access tokens generated by requests sent from these domains (as determined by the Origin header) will specify the domain as their intended aud (audience).
# 3. Any endpoints that accept redirects will only allow the redirect if it uses one of these domain
AUTHN_DOMAINS=localhost
# Any HMAC keys used by AuthN will be derived from this base value. Currently this only includes the key used to securely sign sessions maintained with the AuthN service.
# This value is commonly a 64-byte string, and can be generated with SecureRandom.hex(64) or bin/rake secret. Some deployment systems (e.g. Heroku)
# can provision it automatically.
AUTHN_SECRET=secret
# The database URL specifies the driver, host, port, database name, and connection credentials.
# Formats:
# sqlite3://local/db/authn (note: SQLite3 ignores the host name and connects by path)
# mysql://username:password@host:port/database_name
# postgres://username:password@host:port/database_name
AUTHN_DATABASE_URL=sqlite3://:memory:?mode=memory\&cache=shared
# Redis is the preferred database for session refresh tokens, encrypted blobs, and active user stats. Currently the SQLite3 database is able to manage those functions in a limited deployment, but Redis is required when SQLite3 is not configured.
# Format:
# redis://username:password@host:port/database_number
AUTHN_REDIS_URL=redis://redis:6379/11
# Any access to private AuthN endpoints must use HTTP Basic Auth, with this username.
AUTHN_USERNAME=feelguuds
# Any access to private AuthN endpoints must use HTTP Basic Auth, with this password.
AUTHN_PASSWORD=feelguuds
# May be set to a false value to disable the signup endpoint. If signup is disabled, all users must be created via the private Import Account
# endpoint.
AUTHN_ENABLE_SIGNUP=false
# This setting controls how long the access tokens (aka application sessions) will live. This is an important precaution because it allows the AuthN server to revoke sessions (e.g. on logout) with confidence that any related access tokens will expire soon and have limited damage potential.
# Worried about short sessions? Applications can and should implement a periodic refresh process to keep the effective session alive much longer
# than the expiry listed here. The keratin/authn-js client library implements a half-life maintenance strategy when you configure it to manage
# sessions. This strategy will attempt to refresh the session when it has half-expired, or earlier if there's reason to severely distrust the
# client's clock. If a user closes their client and doesn't return before the access token expires, the refresh logic will restore their session on
# the first page load.
AUTHN_ACCESS_TOKEN_TTL=86400 # 1 day
# This setting controls how frequently a refresh token must be used to keep a session alive. Changing this setting will not apply retroactively to previous tokens.
AUTHN_REFRESH_TOKEN_TTL=2592000 # 30 days
# This salt is added to SECRET_KEY_BASE and used to derive the session key. Customizing this value can provide extra defense against brute-force attacks on AuthN's HMAC
# signatures, but is not required because the work factor involved in a brute-force attack already involves 20k rounds of SHA-256 per guess.
AUTHN_SESSION_KEY_SALT=feelguuds
# This salt is added to SECRET_KEY_BASE and used to derive the encryption key for objects stored in a database. Customizing this value can provide extra
# defense against brute-force attacks on stolen or leaked data, but is not required because the work factor involved in a brute-force attack already
# involves 20k rounds of SHA-256 per guess.
AUTHN_DB_ENCRYPTION_KEY_SALT=feelguuds
# If you ask users to sign up with an email address, enable this so that AuthN can validate properly.
AUTHN_USERNAME_IS_EMAIL=true
# Password complexity is calculated by estimating how many guesses it would take a smart attacker armed with a dictionary, simple transformations
# like L337, and spatial walks across the QWERTY keyboard. The specific algorithm used is zxcvbn, which has a JavaScript implementation if you'd
# like to provide real-time user feedback on password fields.
# 0 - too guessable
# 1 - very guessable
# 2 - somewhat guessable
# 3 - safely unguessable
# 4 - very unguessable
AUTHN_PASSWORD_POLICY_SCORE=2
# Enable if you would like user password changes to expire all other sessions for the account.
AUTHN_PASSWORD_CHANGE_LOGOUT=true
# Must be provided to enable password resets. This URL must respond to POST, should expect to receive account_id and token params, and is expected to deliver the token to the specified account_id.
AUTHN_APP_PASSWORD_RESET_URL=
# Specifies the amount of time a user has to complete a password reset process. After this period of time, the reset token will no longer be accepted.
# (Note that a reset token will also be invalidated if the password changes before this TTL.)
AUTHN_PASSWORD_RESET_TOKEN_TTL=1800 # 30 minutes
# Must be provided to enable notifications of password changes. This URL must respond to POST, should expect to receive an account_id param, and is
# expected to deliver an email confirmation.
AUTHN_APP_PASSWORD_CHANGED_URL=

# Database configurations
AUTHN_MYSQL_EXTERNAL_PORT=3306
AUTHN_MYSQL_INTERNAL_PORT=3306
AUTHN_MYSQL_NAME=mysql_container

# Postgres Configurations
AUTHN_POSTGRES_USER=authentication_service
AUTHN_POSTGRES_PASSWORD=authentication_service
AUTHN_POSTGRES_DB_NAME=authentication_service
AUTHN_POSTGRES_EXTERNAL_PORT=5432
AUTHN_POSTGRES_INTERNAL_PORT=5432
AUTHN_POSTGRES_CONTAINER=auth_service_db

# Redis configurations
AUTHN_REDIS_EXTERNAL_PORT=6379
AUTHN_REDIS_INTERNAL_PORT=6379
AUTHN_REDIS_NAME=redis

# stripe api key
STRIPE_API_KEY=
REFRESH_URL=http://localhost/v1/merchant-account/refresh-url
RETURN_URL=http://localhost/v1/merchant-account/return-url
